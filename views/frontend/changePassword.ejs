<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile Information</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <script src="https://cdn.tailwindcss.com"></script>
    
</head>
<body class="bg-black">

    
  <!-- Header --> 
  <%- include("partials/header") %>  

  <!--breadcrumb-->
  <nav class="text-sm mb-4 pl-10 pt-5" aria-label="Breadcrumb">
    <ol class="list-reset inline-flex items-center space-x-2">
        <li>
            <a href="/" class="text-white hover:text-gray-500">Home</a>
        </li>
        <li>
            <span class="text-white">/</span>
        </li>
        <li class="text-white">
             My Account
        </li>
    </ol>
</nav>
<!--breadcrumb-->

    <div class="container mx-auto p-4">
        <div class="bg-white shadow-md rounded-lg p-6">
            <div class="flex items-center mb-6">
             
                <svg class="w-8 h-8 text-gray-600 hover:text-gray-900" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 0c-4.97 0-9 4.03-9 9v1h18v-1c0-4.97-4.03-9-9-9z"></path>
                </svg>
                <h2 class="text-2xl font-semibold ml-4">Hello</h2> 
            </div>

            <div class="flex flex-col lg:flex-row gap-4">
                <!-- Sidebar -->
                <aside class="w-full lg:w-1/4 bg-gray-200 rounded-lg p-4">
                    <nav class="space-y-4">
                        <a href="/myOrders" class="block text-blue-600 font-semibold">MY ORDERS</a>
                        <div>
                            <h3 class="font-semibold">ACCOUNT SETTINGS</h3>
                            <ul class="mt-2 space-y-2">
                                <li><a href="/userProfile" class="text-gray-700">Profile Information</a></li>
                                <li><a href="/userAdressMang" class="text-gray-700">Manage Addresses</a></li>
                                <li><a href="/orderReturns" class="text-gray-700">Order Returns</a></li>
                                <li><a href="/walletHistory" class="text-gray-700">Wallet History</a></li>
                                <li><a href="/getCoupons" class="text-gray-700">Coupons</a></li>
                            </ul>
                        </div>
                        <div>
                            <h3 class="font-semibold">WALLET BALANCE</h3>
                            <ul class="mt-2 space-y-2">
                                <li><a href="#" class="text-gray-700">₹  <%= user.walletBalance %></a></li>
                            </ul>
                        </div>
                        <div>
                            <h3 class="font-semibold">REFERRAL BALANCE</h3> 
                            <ul class="mt-2 space-y-2">
                                <li><a href="#" class="text-gray-700">₹ <%= user.rewardsBalance %></a></li>
                            </ul>
                            <button id="withdraw-ref-bln" class="bg-blue-500 text-white px-4 my-2 rounded hover:bg-blue-600">Withdraw</button>
                        </div>
                        <p class="text-indigo-900">My Referral Link  :</p>
                        <div class="flex items-center gap-2  ">
                          
                             
                            <p class="refLink text-blue-600"></p>
                        
                         <button onclick="copyText(this.value)" value="" class="refLink relative inline-flex items-centerp-2 rounded bg-transparent hover:bg-gray-100/10 transition-all duration-200">
                            <span id="copyIcon" class="text-gray-500">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                                </svg>
                            </span>  
                            <span id="copiedMessage" class="hidden absolute -top-8 left-1/2 transform -translate-x-1/2 bg-black text-white text-sm px-2 py-1 rounded">
                                Copied!
                            </span>  
                        </button>
                        
                        </div>
                        <p class="text-gray-700">Send this referal link to Others . You will get Rs : 19 for each New Users</p>
                    </nav>




                   
                    

                    <div style="margin-top : 180px ;" > 
                        <a href="/userLogout" class="bg-gray-900 text-white font-bold py-2 px-4  rounded">
                            Logout
                        </a>
                    </div>

                </aside>

                

                
                <!-- Main Content -->
                <div class="w-full max-w-md bg-white p-8 rounded-lg shadow-md">
                    <h2 class="text-2xl font-bold mb-6 text-center">Change Password</h2>
            
                    <form id="changePasswordForm" class="space-y-4"  onsubmit="event.preventDefault(); changePassword()" >
                        <!-- Old Password Field -->
                        <div>
                            <label for="oldPassword" class="block text-gray-700 font-medium">Current Password</label>
                            <input
                                type="password"
                                name="oldPassword"
                                id="oldPassword"
                               
                                class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                placeholder="Enter your current password"
                            />
                            <span id="oldPasswordError"></span>
                        </div>
            
                        <!-- New Password Field -->
                        <div>
                            <label for="newPassword" class="block text-gray-700 font-medium">New Password</label>
                            <input
                                type="password"
                                name="newPassword"
                                id="newPassword"
                              
                                class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                placeholder="Enter your new password"
                            />
                            <span id="newPasswordError"></span>
                        </div>
            
                        <!-- Confirm New Password Field -->
                        <div>
                            <label for="confirmPassword" class="block text-gray-700 font-medium">Confirm New Password</label>
                            <input
                                type="password"
                                name="confirmPassword"
                                id="confirmPassword"
                                
                                class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                placeholder="Re-enter your new password"
                            />
                            <span id="confirmPasswordError"></span>
                        </div>
            
                        <!-- Submit Button -->
                        <button
                            type="submit"   onclick="changePassword()"
                            class="w-full py-2 px-4 bg-blue-500 text-white font-semibold rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                            Change Password
                        </button>
            
                        <!-- Cancel Link -->
                        <div class="text-center mt-4">
                            <a href="/userProfile" class="text-gray-600 hover:text-blue-500">Cancel</a>
                        </div>
                    </form>
                </div>
            





            </div>
        </div>
    </div>

     <!-- Footer -->
     <%- include("partials/footer") %>
     
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>  

    <script>

    

// Get DOM elements
const oldPasswordInput = document.getElementById("oldPassword");
const newPasswordInput = document.getElementById("newPassword");
const confirmPasswordInput = document.getElementById("confirmPassword"); // Fixed variable name
const oldPasswordError = document.getElementById("oldPasswordError");
const newPasswordError = document.getElementById("newPasswordError");
const confirmPasswordError = document.getElementById("confirmPasswordError");

// Show validation message
function showMessage(element, message, isValid) {
    element.textContent = message;
    element.style.color = isValid ? 'green' : 'red';
}

// Validate old password
function validateOldPassword() {
    const oldPassword = oldPasswordInput.value.trim() ;
    const oldPasswordRegex = /^.{6,}$/;

    const isValid = oldPasswordRegex.test(oldPassword);
    showMessage(oldPasswordError, isValid ? 'Valid old password' : 'Enter a valid password', isValid);
    return isValid ;
}

// Validate new password
function validateNewPassword() {
    const newPassword = newPasswordInput.value.trim();
      // - 6 characters
// - 1 uppercase letter
// - 1 lowercase letter
// - 1 number
// - 1 special character
const newPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};:'",.<>/?])(?=.*[^\s]).{6,}$/;
    const isValid = newPasswordRegex.test(newPassword);
    showMessage(newPasswordError, isValid ? 'Valid new password' : 'Password must contain at least 6 characters, including uppercase, lowercase, number and special character' , isValid);
    validateConfirmPassword(); // Revalidate confirm password when new password changes
    return isValid;
}

// Validate confirm password
function validateConfirmPassword() {
    const newPassword = newPasswordInput.value.trim();
    const confirmPassword = confirmPasswordInput.value.trim();
     // - 6 characters
// - 1 uppercase letter
// - 1 lowercase letter
// - 1 number
// - 1 special character
const confirmPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};:'",.<>/?])(?=.*[^\s]).{6,}$/;
    const isValid = confirmPasswordRegex.test(confirmPassword) && (newPassword === confirmPassword);
    showMessage(confirmPasswordError, 
        isValid ? 'Passwords match' : 
        (newPassword !== confirmPassword ? 'Passwords do not match' : 'Enter a valid password' ), 
        isValid
    );
    return isValid;
}

// Add event listeners - fixed 'keyup' event name
oldPasswordInput.addEventListener('keyup', validateOldPassword);
newPasswordInput.addEventListener('keyup', validateNewPassword);
confirmPasswordInput.addEventListener('keyup', validateConfirmPassword);
    
    


 async function changePassword() {
  
    event.preventDefault(); // Prevent form submission

    // Run all validations
    const isOldPasswordValid = validateOldPassword();
    const isNewPasswordValid = validateNewPassword();
    const isConfirmPasswordValid = validateConfirmPassword();

    // Check if all validations pass
    if (!isOldPasswordValid || !isNewPasswordValid || !isConfirmPasswordValid) {
        return;
    }

    // Get values for submission
    const oldPassword = oldPasswordInput.value.trim();
    const newPassword = newPasswordInput.value.trim();
    const confirmPassword = confirmPasswordInput.value.trim();
    

    try {
        // Send a POST request to change the password
        const response = await fetch('/changePassword', { 
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ oldPassword, newPassword, confirmPassword })
        });

        const result = await response.json();

        if (response.ok) {
            // Show success message with SweetAlert
            Swal.fire({
                icon: 'success',
                title: 'Password Changed Successfully',
                text: 'Your password has been updated.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = '/userProfile'; // Redirect after success
            });
        } else {

            if (result.link) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Old Password',
                    html: `${result.message}<br><br>Click <a href="${result.link}" class="text-blue-600 hover:text-blue-800">here</a> to reset your password.`,
                    confirmButtonText: 'OK',
                    showCancelButton: true,
                    cancelButtonText: 'Cancel',
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33'
                }).then((swalResult) => {
                    if (swalResult.isConfirmed) {
                        window.location.href = result.link ;
                    
                    }
                });
              return
            }else{


            // Show error message from server without redirecting
            Swal.fire({
                icon: 'error',
                title: 'Password Change Failed',
                text: result.message || 'An error occurred. Please try again.',
                confirmButtonText: 'OK'
            });
        }
        }
    } catch (error) {
        // Handle network or other errors
        Swal.fire({
            icon: 'error',
            title: 'An error occurred',
            text: 'Could not connect to the server. Please try again later.'
        });
    }
}















        function copyText(text) {
    // Copy the text
    navigator.clipboard.writeText(text);
    
    // Show the copied message
    const message = document.getElementById('copiedMessage');
    const copyIcon = document.getElementById('copyIcon');
    
    // Change icon to checkmark
    copyIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-green-500">
            <polyline points="20 6 9 17 4 12"></polyline>
        </svg>
    `;
    
    // Show message
    message.classList.remove('hidden');
    
    // Hide message and restore icon after 2 seconds
    setTimeout(() => {
        message.classList.add('hidden');
        copyIcon.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
            </svg>
        `;
    }, 2000);
}




//copy referal link

const referralCode = '<%= user.referralCode %>' ;

const url = new URL(window.location.href);

const referalLink = url.origin  +  '/userSignup' + `?referral=${referralCode}`
   
const ref = document.querySelectorAll(".refLink") ; 
ref[0].textContent = referalLink ;
ref[1].value = referalLink ;










document.getElementById("withdraw-ref-bln").addEventListener( "click", () => {
    if('<%= user.rewardsBalance %>' == 0 ){
        Swal.fire({
            icon: 'error',
            title: 'No balance',
            text: 'You have no balance to withdraw.' 
        });
        
      return
    }

    fetch("/withDrawRefferalBalance", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
           
            amount:  '<%= user.rewardsBalance %>'  ,
            userId : '<%= user._id %>'
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if(data.status){
            Swal.fire({
                icon: 'success',
                title: 'Withdrawal Successful',
                text: 'Your referral balance has been withdrawn to wallet account.'
            }).then(() => {
                window.location.reload();
            });
        }else{
            Swal.fire({
                icon: 'error',
                title: 'Withdrawal Failed',
                text: 'Failed to withdraw referral balance.'
            });

        }
    }) 
    .catch(error => {
        console.error('Error:', error);
        
    });
} )


    </script>

</body>
</html>
