


<div class="p-4">
      <form action="/admin/addGenderCategory" method="POST" id="genderForm">
        <div class="mb-4">
          <label for="genderCategory" class="block text-lg font-lg text-gray-900">Add Gender Category</label>
          <input type="text" name="name" id="genderCategory" class="mt-1 p-2 border border-gray-300 rounded w-full"> 
          <lebel id="genderErr"></lebel>
          <button type="submit" class="bg-blue-500 text-white px-4 py-2 mt-2 rounded"> Add </button> 
        </div>
      </form> 
      
      <!-- added gender categories -->
      <div class="w-full bg-white p-6 rounded-lg shadow-lg relative">
        <h2 class="text-xl font-bold mb-4">Gender Categories</h2>
        <select class="absolute top-0 right-0 mt-2 mr-2 p-2 border rounded" onchange="removeSoftdeleteGenderCat(this.value)">
          <option value=""> Add deleted categories </option>
          <% genderCategories.forEach(gender => { %>
            <% if (gender.softDelete) { %>
            <option value="<%= gender._id %>"><%= gender.name %></option>  
            <% } %>
          <% }) %>     
      </select>
        <ul>
            <% genderCategories.forEach(category => { %> 
                <!-- Check if softDelete is false -->
                <% if (!category.softDelete) { %> 
                    <li class="relative p-2 border-b border-gray-300">
                        <span class="text-lg font-medium"><%= category.name %> </span> 
                          <!-- Edit Button -->
                        <button class="absolute top-0 right-8 bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-blue-600"
                        onclick="openEditModal('<%= category._id %>', '<%= category.name %>')">✎</button>

                        <button class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600" onclick="deleteGenderCategory('<%= category._id %>')">X</button>
                    </li>
                <% } %>
            <% }) %>
        </ul>
    </div>

    <hr class="mt-10 mb-5 ">  
      
      <!-- Add Product Category Form -->
      <form action="/admin/addProductCategory" method="POST" id="productForm">    
        <div class="mb-4">
          <label for="productCategory" class="block text-lg font-lg text-gray-900">Add Product Category</label>
          <input type="text" name="name" id="productCategory" class="mt-1 p-2 border border-gray-300 rounded w-full">
          <label id="productErr"></label>
          <label for="genderCategory" class="block text-sm font-medium text-gray-700">Select Gender Category</label>   
          <select name="genderCategory" class="mt-1 p-2 border border-gray-300 rounded w-full">
            <option value=""></option>
            <% genderCategories.forEach(gender => { %>
              <% if (!gender.softDelete){ %>
              <option value="<%= gender._id %>"><%= gender.name %></option>
              <% } %>
            <% }) %>
          </select>   
          <button type="submit" class="bg-blue-500 text-white px-4 py-2 mt-2 rounded">Add</button> 
        </div>
      </form>

      <!-- added product categories categories -->
      <div class="w-full bg-white p-6 rounded-lg shadow-lg relative"> 
        <h2 class="text-xl font-bold mb-4">Product Categories</h2> 
        <select class="absolute top-0 right-0 mt-2 mr-2 p-2 border rounded" onchange="removeSoftdeleteProductCat(this.value)"> 
          <option value=""> Add deleted categories </option>
          <% productCategories.forEach(product => { %>
            <% if (product.softDelete) { %>
            <option value="<%= product._id %>"><%= product.name %>  - <%= product.genderCategory.name %></option>
            <% } %>
          <% }) %>
      </select>
        <ul>
            <% productCategories.forEach(product => { %>
                <!-- Check if softDelete is false -->
                <% if (!product.softDelete )  { %>
                    <li class="relative p-2 border-b border-gray-300">
                        <span class="text-lg font-medium"><%= product.name %> - <%= product.genderCategory.name %></span>
                          <!-- Edit Button -->
                          <button class="absolute top-0 right-8 bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-blue-600"
                          onclick="openProductCategoryEditModal('<%= product._id %>', '<%= product.name %>')">✎</button>
                        <button class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600" onclick="deleteProductCategory('<%= product._id %>')">X</button>
                    </li>
                <% } %>
            <% }) %>
        </ul>
      </div> 


      <hr class="mt-10 mb-5">

      </div>


      <!-- Edit Modal -->
     <div id="editModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
       <div class="bg-white p-6 rounded-lg shadow-lg">
           <h3 class="text-lg font-bold mb-4">Edit Gender Category</h3>
           <input type="text" id="editInput" class="border p-2 w-full mb-4" />
           <button class="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600" onclick="saveCategoryName()">Save</button>
           <button class="bg-gray-500 text-white py-2 px-4 rounded ml-2 hover:bg-gray-600" onclick="closeEditModal()">Cancel</button>
       </div>
     </div>

     <!-- Edit product category Modal -->
     <div id="editProductCategoryModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
       <div class="bg-white p-6 rounded-lg shadow-lg">
            <h3 class="text-lg font-bold mb-4">Edit Product Category</h3>
           <input type="text" id="editProudctCategoryInput" class="border p-2 w-full mb-4" />
            <button class="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600" onclick="saveProductCategoryName()">Save</button>
            <button class="bg-gray-500 text-white py-2 px-4 rounded ml-2 hover:bg-gray-600" onclick="closeProductCategoryEditModal()">Cancel</button>
        </div>
     </div>

      
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>


  <script>







   //alerts

   const url = new URL (window.location.href); 
    
    if(url.searchParams.get("alreadyExists") == 1){
      toastr.error('This category already exists !') ;
    }

    if(url.searchParams.get("genderCategory")==0){
      toastr.error('select gender category !') ;
    }

    if(url.searchParams.get("productCategory")==0){  
      toastr.error('select product category !') ;
    }

    if(url.searchParams.get("added") == 1){
      toastr.success('Category added ') ;
    }

    
         


    function filterProductCategories(category){
      window.location.href = `/admin/addCategory?genderCategory=${category}` ;
    }



   //validation
   const genderCategoryInput = document.getElementById("genderCategory");
   const productCategoryInput = document.getElementById("productCategory");
  

   const genderCategoryError = document.getElementById("genderErr") ;
   const productCategoryError = document.getElementById("productErr") ;


   function showMessage (element , message , isValid){
    element.textContent = message ;
    element.style.color = isValid ? 'green' : 'red' ;
   }

   function validateGender(){
    const gender = genderCategoryInput.value.trim();
          if (gender.length < 3 || !/^[a-zA-Z\s]+$/.test(gender)){
          showMessage(genderCategoryError, "Gender Category Name must be at least 3 characters", false);
          return false;
          }
          showMessage( genderCategoryError , "valid", true);
          return true;
   }

   function validateProduct(){
    const product = productCategoryInput.value.trim();
          if (product.length < 3 || !/^[a-zA-Z\s]+$/.test(product)){
          showMessage(productCategoryError, "Product Category Name must be at least 3 characters", false);
          return false;
          }
          showMessage( productCategoryError , "valid", true);
          return true;
   }



   genderCategoryInput.addEventListener("keyup" , validateGender);
   productCategoryInput.addEventListener("keyup" , validateProduct);
  



   document.getElementById("genderForm").addEventListener("submit", function(event){
      let isValid = validateGender();
      if(!isValid){
        event.preventDefault(); // Prevent form submission
        toastr.error("Please fix the validation errors before submitting.");
    }
   })

   
   document.getElementById("productForm").addEventListener("submit" , function(event){
      let isValid = validateProduct();
      if(!isValid){
        event.preventDefault(); // Prevent form submission
        toastr.error("Please fix the validation errors before submitting.");
    }
   })

   
 




  
         
  

  


    






        //softdelete gender category 
        function deleteGenderCategory(genderId){
          fetch("/admin/deleteGenderCategory" , {
            method : "POST" ,
            headers : { "Content-Type" : "application/json" } , 
            body : JSON.stringify ({genderId})
          } ).then(Response => Response.json())
          .then( data => {
            if (data.success) {
             Swal.fire({
               icon: 'success',
               title: 'Deleted!',
               text: 'Gender category deleted successfully.',
               confirmButtonText: 'OK'
             }).then(() => {
              // location.reload(); // Reload the page after the user clicks 'OK'
              window.location.href="/admin/addCategory" ;
             });
           } else {
             Swal.fire({
               icon: 'error',
               title: 'Failed!',
               text: 'Failed to delete gender category.' , 
               confirmButtonText: 'OK'  
             });
            }  
            

          }) 
        }

        //change softdelete gendercatery
        function removeSoftdeleteGenderCat(genderId){
          fetch("/admin/softDeleteGenderCate" , {
            method : "POST" ,
            headers : { "Content-Type" : "application/json" }, 
            body : JSON.stringify ({genderId})
          } ).then(Response => Response.json())
          .then(data => {

            if (data.success) {
             Swal.fire({
               icon: 'success',
               title: 'Added!',
               text: 'Gender category added successfully.',
               confirmButtonText: 'OK'
             }).then(() => {
             //  location.reload(); // Reload the page after the user clicks 'OK'
             window.location.href="/admin/addCategory" ;
             });
           } else {
             Swal.fire({
               icon: 'error',
               title: 'Failed!',
               text: 'Failed to add gender category.' , 
               confirmButtonText: 'OK'  
             });
            }  

          }) 
        }
         
      
      //soft delete product category
      function deleteProductCategory(productId){ 
        fetch("/admin/deleteProductCategory" , {
            method : "POST" ,
            headers : { "Content-Type" : "application/json" }, 
            body : JSON.stringify ({productId})
          } ).then(Response => Response.json())
          .then(data => {
            if (data.success) {
             Swal.fire({
               icon: 'success',
               title: 'Deleted!',
               text: 'Product Category deleted successfully.',
               confirmButtonText: 'OK'
             }).then(() => {
               //location.reload(); // Reload the page after the user clicks 'OK'
               window.location.href="/admin/addCategory" ;
             });
           } else {
             Swal.fire({
               icon : 'error',
               title : 'Failed!',
               text : 'Failed to delete product category.' , 
               confirmButtonText : 'OK'  
             });
            }  
          }) 
        }



      //change softdelete product catery
      function removeSoftdeleteProductCat(productId){
          fetch("/admin/softDeleteProductCate" , {
            method : "POST" ,
            headers : { "Content-Type" : "application/json" }, 
            body : JSON.stringify ({productId})
          } ).then(Response => Response.json()) 
          .then(data => {
            if (data.success) {
             Swal.fire({
               icon: 'success',
               title: 'Added!',
               text: 'Product category added successfully. ' ,
               confirmButtonText: 'OK'
             }).then(() => {
              // location.reload(); // Reload the page after the user clicks 'OK'
              window.location.href="/admin/addCategory" ;
             });
            } else {
             Swal.fire({
               icon: 'error',
               title: 'Failed!',
               text: 'Failed to add product category.' , 
               confirmButtonText: 'OK'  
             });
            }  
          }) 
        }
      

      


    let currentCategoryId = null;

    function openEditModal(categoryId, categoryName) {
        currentCategoryId = categoryId;
        document.getElementById('editInput').value = categoryName;
        document.getElementById('editModal').classList.remove('hidden');
    }

    function closeEditModal() {
        document.getElementById('editModal').classList.add('hidden');
    }

    async function saveCategoryName() {
        const updatedName = document.getElementById('editInput').value ; 
        

        // Call backend API to update category name
        try {
          const nameRegex = /^[A-Za-z]{3,}$/;

       // Check if the updated name matches the criteria
       if (!nameRegex.test(updatedName)) {
           toastr.error("Category name must be at least 3 letters and contain only text characters.");
           return;
       }

            const response = await fetch(`/admin/update-gender-category/${currentCategoryId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name : updatedName })
            });

            const result = await response.json();

            if (response.ok) {
                location.reload(); // Reload to show updated name 
            } else {
              toastr.error(result.message) ;
            }
        } catch (error) {
            console.error('Error updating category:', error);
        } finally {
            closeEditModal();
        }
    }




    let currentProductCategoryId = null;

    function openProductCategoryEditModal(categoryId, categoryName) {
        currentProductCategoryId = categoryId;
       
        document.getElementById('editProudctCategoryInput').value = categoryName;
        document.getElementById('editProductCategoryModal').classList.remove('hidden');
    }

    function closeProductCategoryEditModal() {
        document.getElementById('editProductCategoryModal').classList.add('hidden');
    }

    async function saveProductCategoryName(){
        const updatedName = document.getElementById('editProudctCategoryInput').value ; 
        

        // Call backend API to update category name
        try {
          const nameRegex = /^[A-Za-z]{3,}$/;

       // Check if the updated name matches the criteria
       if (!nameRegex.test(updatedName)) {
           toastr.error("Category name must be at least 3 letters and contain only text characters.");
           return;
       }

            const response = await fetch(`/admin/update-product-category/${currentProductCategoryId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name : updatedName })
            });

            const result = await response.json();

            if (response.ok) {
                location.reload(); // Reload to show updated name 
            } else {
              toastr.error(result.message) ;
            }
        } catch (error) {
            console.error('Error updating category:', error);
        } finally {
          closeProductCategoryEditModal();
        }
    }


      </script>
  