



<div class="p-4">
      <h1>ADD PRODUCT...</h1>
      <hr>

      <!-- Add Product Form -->
      <form action="/admin/addProductPost" method="POST"  enctype="multipart/form-data" id="form">  
        <div class="mb-4">
          <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
          <input type="text" name="title" id="title" class="mt-1 p-2 border border-gray-300 rounded w-full" >  
          <span id="titleErr"></span>
        </div>
        <div class="mb-4">
          <label for="titleDescription" class="block text-sm font-medium text-gray-700">Title Description</label>
          <input type="text" name="titleDescription" id="titleDescription" class="mt-1 p-2 border border-gray-300 rounded w-full" >
          <span id="titleDescriptionErr"></span>
        </div>


        <div class="mb-4">
          <label for="productDescription" class="block text-sm font-medium text-gray-700">Product Description</label>
          <textarea name="productDescription" id="productDescription" class="mt-1 p-2 border border-gray-300 rounded w-full"></textarea>
          <span id="productDescriptionErr"></span>
        </div>
        <div class="mb-4">
          <label for="highlights" class="block text-sm font-medium text-gray-700">Highlights</label>
          <textarea name="highlights" id="highlights" class="mt-1 p-2 border border-gray-300 rounded w-full" ></textarea>
          <span id="highlightsErr" ></span>
        </div>
        <div class="mb-4">
          <label for="details" class="block text-sm font-medium text-gray-700">Details</label>
          <textarea name="details" id="details" class="mt-1 p-2 border border-gray-300 rounded w-full" ></textarea>
          <span id="detailsErr"></span>
        </div>

        <!---------------------- SIZE TABLE -----------------------> 
          <div class="overflow-x-auto">
            <table id="productTable" class="min-w-full bg-white border border-gray-300">
                <thead class="bg-gray-200">
                    <tr>
                        <th class="py-2 px-4 border-b">Size</th>
                        <th class="py-2 px-4 border-b">Quantity</th>
                        <th class="py-2 px-4 border-b">Price</th>
                        <th class="py-2 px-4 border-b">Action</th>
                    </tr>
                </thead>
                <tbody>
                   

                </tbody>
            </table>
        </div>
        
        <div class="mt-4">
            <button type="button" onclick="addRow()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700">Add Row</button>
        </div>
        <!----------------------------------------->

        <div class="mb-4 mt-10"> 
          <label for="genderCategory" class="block text-sm font-medium text-gray-700">Gender Category</label>
          <select name="genderCategory" id="genderCategory"  class="mt-1 p-2 border border-gray-300 rounded w-full" onchange="genderCategoryChange(this.value)">
            <option value=""></option>
            <% genderCategories.forEach(gender => { %>
              <option value="<%= gender._id %>"><%= gender.name %></option> 
            <% }) %>
          </select>
          <span id="genderCategoryErr"></span>
        </div>
        <div class="mb-4">
          <label for="productCategory" class="block text-sm font-medium text-gray-700">Product Category</label>
          
          <select name="productCategory" id="productCategory"   class="mt-1 p-2 border border-gray-300 rounded w-full" onchange="productCategoryChange()" >
            <option value=""></option>
            <% productCategories.forEach(category => { %>
              <% if (!category.softDelete && category.genderCategory && category.genderCategory.name ) { %>
              <option value="<%= category._id %>" data-gender-category-id="<%= category.genderCategory._id %>" ><%= category.name %> - <%= category.genderCategory.name %></option>
              <% } %>
            <% }) %>
          </select>
          <span id="productCategoryErr"></span>
        </div> 
        <div class="mb-4">
          <label for="productSubCategory" class="block text-sm font-medium text-gray-700">Product Sub Category</label>
          <select name="productSubCategory" id="productSubCategory"   class="mt-1 p-2 border border-gray-300 rounded w-full" onchange="productSubCategoryChange()">
            <option value=""></option>           
            <% productSubCategories.forEach(subCategory => { %>
              <% if (!subCategory.softDelete && subCategory.genderCategory && subCategory.genderCategory.name ) { %>
              <option value="<%= subCategory._id %>" data-product-category-id="<%= subCategory.productCategory._id %>"><%= subCategory.name %> - <%= subCategory.productCategory.name %> -  <%= subCategory.genderCategory.name %> </option>         
              <% } %>
            <% }) %>
          </select>
          <span id="productSubCategoryErr"></span>
        </div>
        <div class="mb-4">   
          <label for="images" class="block text-sm font-medium text-gray-700">Product Images</label>
          <input type="file" name="productImages" id="productImages" class="mt-1 p-2 border border-gray-300 rounded w-full " >
          <label class="productImgErr text-red-500"></label>
          <span id="productImgErr"></span>
        </div> 

        <!-- cropping contiainer -->
      <div id="cropperContainer" style="display: none; max-width: 500px; margin-bottom: 20px;"> 
        <img id="image" src="" alt="Image for cropping" style="max-width: 100%;">  
      </div>
      <!--cropping container--> 

      
       <!-- Cropped images preview container -->
       <div id="croppedImagesContainer" class="mb-4">
       <h3 class="text-sm font-medium text-gray-700">Cropped Images</h3>
       <div id="croppedImages" class="flex flex-wrap">  </div>
       </div>

      <button type="button" id="cropButton" style="display: none;" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700">Crop & Upload</button>
      <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Add Product</button> 
    
    </form>
    </div> 
  </div> 

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
  <!--field validation-->  
<script  src="/public/scripts/validation-addProduct.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>        


</div>
  <script>



 let genderCategoryId;
 let productCategoryId; 
 let productSubCategoryId ;


 function genderCategoryChange(id){  
     genderCategoryId = id ;
 }

 function productCategoryChange(){
        const selectElement = document.getElementById('productCategory');
        const selectedOption = selectElement.options[selectElement.selectedIndex]; 
        
        const categoryId = selectedOption.value; // Category ID from value attribute

        productCategoryId = categoryId ;

        const selectedGenderCategoryId = selectedOption.getAttribute('data-gender-category-id'); // Gender category ID from data attribute
        
        if (genderCategoryId !== selectedGenderCategoryId) {
           toastr.error("Select the product category related to gender! if doesn't exist please be add - go to add category !")
            selectElement.value = null; // Revert to last valid selection
        } else {
            selectElement.value  = categoryId; // Update last valid selection
        }

 }

 function productSubCategoryChange(){
        const selectElement  =  document.getElementById("productSubCategory");
        const selectedOption = selectElement.options[selectElement.selectedIndex];
        const subCategoryId = selectedOption.value; // Category ID from value attribute

        productSubCategoryId = subCategoryId ;

        const selectedProductCategoryId = selectedOption.getAttribute('data-product-category-id'); 

        if (productCategoryId !== selectedProductCategoryId) {
            toastr.error("Select the sub category releated to product category ! if doesn't exist please be add - go to add category !") ;
            selectElement.value = null; // Revert to last valid selection
        } else {
            selectElement.value  = subCategoryId; // Update last valid selection
        }
 }






let cropper ;
        const inputImage = document.getElementById('productImages');
        const image = document.getElementById('image');
        const cropButton = document.getElementById('cropButton') ; 
        const cropperContainer = document.getElementById('cropperContainer');
        const croppedImagesContainer = document.getElementById('croppedImages');
        let croppedImagesData = [ ] ;

        inputImage.addEventListener('change', (event) => {
            const files = event.target.files; 
            if (files && files.length > 0) {
                const file = files[0];
                const reader = new FileReader() ; 
                reader.onload = (e) => {
                    image.src = e.target.result; 
                    cropperContainer.style.display = 'block'; 
                    cropButton.style.display = 'inline-block';           
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper( image, {
                        aspectRatio: NaN,
                        viewMode: 1,
                        dragMode: 'move',
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        minCropBoxWidth: 50,
                        minCropBoxHeight: 50,
                    });
                };
                reader.readAsDataURL( file )  ; 
            }
        });

        cropButton.addEventListener('click', () => {
            if (!cropper) {
                alert('Please select an image first.');
                return;
            }

            cropper.getCroppedCanvas().toBlob((blob) => {
                croppedImagesData.push(blob);

                const url = URL.createObjectURL(blob);
                const imgElement = document.createElement('img') ;  
                imgElement.src = url;
                imgElement.style.maxWidth = '100px' ;
                imgElement.style.margin = '10px'    ;
                croppedImagesContainer.appendChild(imgElement) ;

                cropperContainer.style.display = 'none';
                cropButton.style.display = 'none'; 
                inputImage.value = '';
                inputImage.disabled = false;  
            }, 'image/png');
        });





        //validation
        const titleInput  =  document.getElementById("title") ;
        const titleDescr  =  document.getElementById("titleDescription");
        const productDes  =  document.getElementById("productDescription") ;
        const highlights  =  document.getElementById("highlights") ;
        const details     =  document.getElementById("details");
        const genderCategory = document.getElementById("genderCategory");
        const productCategory = document.getElementById("productCategory");
        const productSubCategory = document.getElementById("productSubCategory");


        const titleError  =  document.getElementById("titleErr") ;
        const titleDescrError  =  document.getElementById("titleDescriptionErr");
        const productDesError  =  document.getElementById("productDescriptionErr") ;
        const highlightsError  =  document.getElementById("highlightsErr") ;
        const detailsError     =  document.getElementById("detailsErr");
        const genderCategoryError = document.getElementById("genderCategoryErr");
        const productCategoryError = document.getElementById("productCategoryErr");
        const productSubCategoryError = document.getElementById("productSubCategoryErr");
        const productImgError       =  document.getElementById("productImgErr") ;

        

        // Show validation messages
        function showMessage(element, message, isValid) {
          element.textContent = message;
          element.style.color = isValid ? 'green' : 'red';
        }


       function validateTitle() {
          const title = titleInput.value.trim();
          if (title.length < 3 || !/^[a-zA-Z\s]+$/.test(title)){
          showMessage(titleError, "Name must be at least 3 characters", false);
          return false;
          }
          showMessage(titleError, "valid", true);
          return true;
       }


       function validateTitleDescr() {
       
         const titleDescrValue = titleDescr.value.trim() ;
         if ( titleDescrValue.length < 5  || !/^[a-zA-Z][a-zA-Z ,.]+$/.test(titleDescrValue) ) {
           showMessage(  titleDescrError  , "Title description must start with a letter and contain only letters, spaces, and commas", false);
           return false;
         }
       
         showMessage( titleDescrError , "valid", true);
         return true;
       }


       function validateProductDes() {
         const productDesValue = productDes.value.trim();
         if ( productDesValue.length < 5  || !/^[a-zA-Z][a-zA-Z ,.]+$/.test(productDesValue) ) {
           showMessage( productDesError , "Product description must start with a letter and contain only letters, spaces, and commas", false);
           return false;
         }
         showMessage( productDesError , "valid", true);
         return true;
       }


       function validateHighlights() {
         const highlightsValue = highlights.value.trim();
         if (highlightsValue.length < 5  || !/^[a-zA-Z][a-zA-Z ,.]+$/.test(highlightsValue) ) {
           showMessage( highlightsError , "Highlights must start with a letter and contain only letters, spaces, and commas", false);
           return false;
         }
         showMessage( highlightsError , "valid", true);
         return true;
       }


       function validateDetails() {
         const detailsValue = details.value.trim();
         if ( detailsValue.length < 5  || !/^[a-zA-Z][a-zA-Z ,.]+$/.test(detailsValue) ) {
           showMessage( detailsError  , "Details must start with a letter and contain only letters, spaces, and commas", false);
           return false;
         }
         showMessage( detailsError  , "valid", true);
         return true;
       }





       //size validation
    function validateSize(sizeInput) {
         const size = sizeInput.value.trim();
         if (size.length < 1 || !/^[a-zA-Z0-9\s]+$/.test(size)) {
             sizeInput.style.borderColor = 'red';
             sizeInput.style.outline = '2px solid red';
             return false;
         }
        sizeInput.style.borderColor = 'green';
        sizeInput.style.outline = '2px solid green';
        return true;
       }


     function validateQuantity(quantityInput) {
          const quantity = parseInt(quantityInput.value);
          if (isNaN(quantity) || quantity < 0) {
                    quantityInput.style.borderColor = 'red';
                    quantityInput.style.outline = '2px solid red';

              return false;
          }
          quantityInput.style.borderColor = 'green';
          quantityInput.style.outline = '2px solid green';

          return true;
      }


     function validatePrice(priceInput) {
         const price = parseFloat(priceInput.value);
         if (isNaN(price) || price < 0) {
             priceInput.style.borderColor = 'red';
             priceInput.style.outline = '2px solid red';

             return false;
         }
         priceInput.style.borderColor = 'green';
         priceInput.style.outline = '2px solid green';
         return true;
     }


     function validateGenderCategory() {
       if (genderCategory.value === "") {
         showMessage(genderCategoryError, "Please select a gender category.", false);
         return false;
       }
       showMessage(genderCategoryError, "Valid", true);
       return true;
     }


     function validateProductCategory() {
       if (productCategory.value === "") {
         showMessage(productCategoryError, "Please select a product category.", false);
         return false;
       }
       showMessage(productCategoryError, "Valid", true);
       return true;
     }


     function validateProductSubCategory() {
       if (productSubCategory.value === "") {
         showMessage(productSubCategoryError, "Please select a product sub-category." , false );
         return false;
       }
       showMessage(productSubCategoryError, "Valid", true);
       return true;
     }

     // Minimum images validation function
function validateMinImages() {
  
  if (croppedImagesData.length < 3){
    showMessage(productImgError, "select atleast 3 images." , false );
    return false;
  }
  showMessage(productImgError, "Valid", true);
  return true;
}





       titleInput.addEventListener("keyup", validateTitle );
       titleDescr.addEventListener("keyup", validateTitleDescr ) ; 
       productDes.addEventListener("keyup" ,validateProductDes ) ;
       highlights.addEventListener("keyup" , validateHighlights  ) ;
       details.addEventListener("keyup" ,  validateDetails ) ; 
       
       


        



        document.getElementById('form').addEventListener( 'submit' , function( event ) {
          event.preventDefault(); // Prevent form from submitting by default

    // Check all validation functions and minimum image count
    if (
        validateTitle() &&
        validateTitleDescr() &&
        validateProductDes() &&
        validateHighlights() &&
        validateDetails() &&
        validateGenderCategory() &&
        validateProductCategory() &&
        validateProductSubCategory() &&
        validateMinImages() // Check if there are at least 3 images
    ){


      const allRowsValid = Array.from(document.querySelectorAll('#productTable tbody tr')).every(row => {
        const sizeInput = row.querySelector('input[name="size[]"]');
        const quantityInput = row.querySelector('input[name="quantity[]"]');
        const priceInput = row.querySelector('input[name="price[]"]');

        return validateSize(sizeInput) && validateQuantity(quantityInput) && validatePrice(priceInput);
    });

    if (!allRowsValid) {
      Swal.fire({
                icon: 'WARNING',
                title: 'Please fix errors in the size, quantity, or price fields before submitting.',
                text:' Please try again.',
                confirmButtonText: 'OK'
            });

        return;
    }


            const formData = new FormData(this) ; 
            formData.delete('productImages');     
            croppedImagesData.forEach((blob , index) => {
                formData.append( `productImages` , blob, `cropped_${index}.png`) ; 
            });  

        

            fetch(this.action, {
                method: 'POST',
                body: formData,
            }).then(response => response.json())
            .then(data => {
                if (data.message) {
                   
                    Swal.fire({
                icon: 'success',
                title: `${data.message}`,
                text:' success.',
                confirmButtonText: 'OK'
            });

                    location.reload();
                    
                } else if(data.size ){
                  Swal.fire({
                icon: 'warning',
                title: `${data.size}`,
                text:' Try again.',
                confirmButtonText: 'OK' 
                  })
                }
                else {
                  Swal.fire({
                icon: 'warning',
                title: `${data.error}`,
                text:'Failed to add product',
                confirmButtonText: 'OK' 
                  })
                   
                }
            }).catch(error => {
              Swal.fire({
                icon: 'warning',
                title: `${error}`,
                text:'Failed to add product',
                confirmButtonText: 'OK' 
                  })
            });
        }else{
          Swal.fire({
                icon: 'warning',
                text:'correct all the errors before submitting',
                confirmButtonText: 'OK' 
                  })
      }

    })



        //add product size details
        function addRow() {

        const table = document.getElementById('productTable').getElementsByTagName('tbody')[0] ;
        const rowCount = table.rows.length ;
        const newRow = table.insertRow() ;
    
        newRow.innerHTML = `
            <td><input type="text"  name="size[]" class="border border-gray-300 p-1 " ></td>
            <td><input type="number" name="quantity[]" class="border border-gray-300 p-1" min="0"  ></td>
            <td><input type="number" name="price[]" class="border border-gray-300 p-1" min="0" ></td>
            <td><button type="button" class="text-red-500" onclick="deleteRow(this)">Delete</button></td>
        `;

        const sizeInput = newRow.querySelector('input[name="size[]"]');
        const quantityInput = newRow.querySelector('input[name="quantity[]"]');
        const priceInput = newRow.querySelector('input[name="price[]"]');

        sizeInput.addEventListener('keyup', () => validateSize(sizeInput));
        quantityInput.addEventListener('keyup', () => validateQuantity(quantityInput));
        priceInput.addEventListener('keyup', () => validatePrice(priceInput));


        }


        //delete size ; 
        function deleteRow(button) {
            const row = button.parentNode.parentNode;
            row.parentNode.removeChild(row);
        }




        

       
 
  </script> 
 